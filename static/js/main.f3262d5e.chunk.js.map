{"version":3,"sources":["components/Header/index.js","components/Card/Card.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","className","alt","Component","Card","props","style","backgroundImage","onClick","handleClick","name","Board","state","characters","characterCards","score","handleWrong","resetGame","guessedCorrect","newCharacters","map","character","newPic","clicked","handleCorrect","setState","shuffleArray","i","length","j","Math","floor","random","id","this","key","image","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAiBeA,E,iLAZP,OAEI,6BACI,yBAAKC,IAAI,2BAA2BC,UAAU,QAAQC,IAAI,oB,GANrDC,a,eCYNC,EAXF,SAAAC,GACT,OACI,yBACIC,MAAO,CAAEC,gBAAgB,OAAD,OAASF,EAAML,IAAf,MACxBE,IAAKG,EAAMH,IACXD,UAAU,QACVO,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,U,uOC+EpCC,E,2MAlFXC,MAAQ,CACJC,WAAYC,EACZC,MAAO,G,EAKXC,YAAc,WACV,EAAKC,a,EAGTR,YAAc,SAAAC,GACV,IAAIQ,GAAiB,EACfC,EAAgB,EAAKP,MAAMC,WAAWO,IAAI,SAAAC,GAC5C,IAAMC,E,qVAAM,IAAQD,GASpB,OARIC,EAAOZ,OAASA,IACXY,EAAOC,UACRD,EAAOC,SAAU,EACjBL,GAAiB,IAKlBI,IAEXJ,EAAiB,EAAKM,cAAcL,GAAiB,EAAKH,YAAYG,I,EAK1EK,cAAgB,SAAAL,GACZ,EAAKM,SAAS,CACVZ,WAAY,EAAKa,aAAaP,GAC9BJ,MAAO,EAAKH,MAAMG,MAAQ,IAGL,KAArB,EAAKH,MAAMG,OACX,EAAKE,a,EAKbS,aAAe,SAAAb,GACX,IAAK,IAAIc,EAAId,EAAWe,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEX,CAACd,EAAWgB,GAAIhB,EAAWc,IAA3Dd,EAAWc,GAFgC,KAE5Bd,EAAWgB,GAFiB,KAIhD,OAAQhB,G,EAGZI,UAAY,WACR,EAAKQ,SAAS,CACVV,MAAO,EACPF,WAAYC,K,wEAIV,IAAD,OACL,OACI,6BACI,yBAAKb,UAAU,aACX,yBAAKgC,GAAG,YAAR,UAA2BC,KAAKtB,MAAMG,QAE1C,6BACA,yBAAKd,UAAU,gBACX,yBAAKA,UAAU,SACViC,KAAKtB,MAAMC,WAAWO,IAAI,SAAAC,GACvB,OAAQ,kBAAC,EAAD,CACJX,KAAMW,EAAUX,KAChByB,IAAKd,EAAUX,KACfD,YAAa,EAAKA,YAClBT,IAAKqB,EAAUe,MACflC,IAAKmB,EAAUX,gB,GAzE3BP,aCeLkC,E,2MAbbzB,MAAQ,CACNG,MAAO,G,wEAIP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVUZ,aCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.f3262d5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n\n    render() {\n        return (\n\n            <div>\n                <img src='/assets/daria_banner.png' className=\"daria\" alt='Daria Logo' />\n\n            </div>\n\n        );\n    }\n\n}\n\nexport default Header;","import React from \"react\";\nimport \"../../App.css\";\n\nconst Card = props => {\n    return (\n        <div\n            style={{ backgroundImage: `url(${props.src})` }}\n            alt={props.alt}\n            className=\"block\"\n            onClick={() => props.handleClick(props.name)}>\n        </div>\n    )\n};\n\nexport default Card;","import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport Card from '../Card';\nimport characterCards from '../../characters.json';\n\nclass Board extends Component {\n    state = {\n        characters: characterCards,\n        score: 0\n    }\n\n\n\n    handleWrong = () => {\n        this.resetGame();\n    };\n\n    handleClick = name => {\n        let guessedCorrect = false;\n        const newCharacters = this.state.characters.map(character => {\n            const newPic = { ...character };\n            if (newPic.name === name) {\n                if (!newPic.clicked) {\n                    newPic.clicked = true;\n                    guessedCorrect = true;\n\n                }\n\n            }\n            return newPic;\n        })\n        guessedCorrect ? this.handleCorrect(newCharacters) : this.handleWrong(newCharacters)\n    };\n\n\n\n    handleCorrect = newCharacters => {\n        this.setState({\n            characters: this.shuffleArray(newCharacters),\n            score: this.state.score + 1,\n        });\n\n        if (this.state.score === 11) {\n            this.resetGame();\n        }\n\n    };\n\n    shuffleArray = characters => {\n        for (let i = characters.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [characters[i], characters[j]] = [characters[j], characters[i]];\n        }\n        return (characters);\n    };\n\n    resetGame = () => {\n        this.setState({\n            score: 0,\n            characters: characterCards\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"scoreBelt\">\n                    <div id=\"scoreDiv\">Score: {this.state.score}</div>\n                </div>\n                <br />\n                <div className=\"boardWrapper\">\n                    <div className=\"board\">\n                        {this.state.characters.map(character => {\n                            return (<Card\n                                name={character.name}\n                                key={character.name}\n                                handleClick={this.handleClick}\n                                src={character.image}\n                                alt={character.name}\n                            />)\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n\n  state = {\n    score: 0\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Board />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}